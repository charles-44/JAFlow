# Définit où trouver le serveur Keycloak (utilise le nom du service Docker)
upstream keycloak_server {
    server jaflow-keycloak:8080;
}

upstream sb_workflow_upstream {
    server host.docker.internal:8082 max_fails=1 fail_timeout=1s;
    # server jaflow-sb-container:8082;
}

server {
    listen 8000;
    server_name localhost; # Ou le nom de domaine/IP si différent

    # Active Gzip pour de meilleures performances
    gzip on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
    gzip_vary on;
    gzip_disable "msie6";


    # Location pour Keycloak via le proxy
    location /keycloak/ {
        # Important: La barre oblique finale est cruciale ici.
        # Elle mappe /keycloak/ du proxy vers /keycloak/ du backend
        # car nous avons défini KC_HTTP_RELATIVE_PATH=/keycloak
        proxy_pass http://keycloak_server/keycloak/;

        # Headers essentiels pour que Keycloak comprenne la requête originale via le proxy
        proxy_set_header Host $host; # Transmet le nom d'hôte original
        proxy_set_header X-Real-IP $remote_addr; # Transmet l'IP réelle du client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Liste des IPs des proxys
        proxy_set_header X-Forwarded-Host $host; # Host original demandé par le client
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Port 8000; # Port sur lequel Nginx écoute sur le host
        proxy_set_header X-Forwarded-Proto $scheme; # Protocole (http ou https)

        # Recommandé pour les applications comme Keycloak
        proxy_buffering off;
        proxy_request_buffering off; # Ajouté pour certains flux Keycloak
        proxy_http_version 1.1; # Utilisation de HTTP/1.1 pour le backend

        # Augmentation des timeouts si nécessaire
        # proxy_connect_timeout 60s;
        # proxy_send_timeout    60s;
        # proxy_read_timeout    60s;
    }


    # Redirection vers Spring Boot (exemples)
    location /sb-container/ {
        proxy_pass http://jaflow-sb-container:8081/;

        # Headers essentiels pour que Keycloak comprenne la requête originale via le proxy
        proxy_set_header Host $host; # Transmet le nom d'hôte original
        proxy_set_header X-Real-IP $remote_addr; # Transmet l'IP réelle du client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Liste des IPs des proxys
        proxy_set_header X-Forwarded-Host $host; # Host original demandé par le client
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Port 8000; # Port sur lequel Nginx écoute sur le host
        proxy_set_header X-Forwarded-Proto $scheme; # Protocole (http ou https)
    }

    location /sb-workflow/ {
        proxy_pass http://sb_workflow_upstream;
        proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;

        expires -1;
        add_header Cache-Control no-store;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Port 8000;
        proxy_set_header X-Forwarded-Proto $scheme;

    }

    # Redirection vers Angular local (UI Live)
    location /ui-live/ {
        proxy_pass http://host.docker.internal:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

        # Vous pouvez ajouter d'autres locations ici si Nginx doit servir autre chose
    location / {
        # Par exemple, retourner une page par défaut ou un autre service
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html; # Configuration typique pour une SPA (Single Page Application) si besoin
    }

    # Gestion des erreurs (optionnel)
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
